// Generated by js_api_generator.py
#include <unordered_map>
#include "../../spine/cubicat-port/spine_node.h"
extern std::unordered_map<uint32_t, void*>* g_APIMap;
SpineNode* createSpine() {
    return SpineNode::createSpine();
}
void SpineNode_loadWithBinaryFile(SpineNode* ptr, char* skeletonBinaryFile, char* atlasFile, float scale) {
    ptr->loadWithBinaryFile(skeletonBinaryFile, atlasFile, scale);
}
void SpineNode_setSkinByName(SpineNode* ptr, char* skinName) {
    ptr->setSkinByName(skinName);
}
void SpineNode_setSkinByIndex(SpineNode* ptr, int idx) {
    ptr->setSkinByIndex(idx);
}
TrackEntry* SpineNode_setAnimation(SpineNode* ptr, int trackIndex, char* name, bool loop) {
    return ptr->setAnimation(trackIndex, name, loop);
}
TrackEntry* SpineNode_addAnimation(SpineNode* ptr, int trackIndex, char* name, bool loop, float delay) {
    return ptr->addAnimation(trackIndex, name, loop, delay);
}
void SpineNode_clearTrack(SpineNode* ptr, int trackIndex) {
    ptr->clearTrack(trackIndex);
}
void SpineNode_scale(SpineNode* ptr, float x, float y) {
    ptr->scale(x, y);
}
void SpineNode_position(SpineNode* ptr, float x, float y) {
    ptr->position(x, y);
}
void SpineNode_useBilinearFilter(SpineNode* ptr, bool b) {
    ptr->useBilinearFilter(b);
}
void Register_SPINE_API() {
    std::unordered_map<uint32_t, void*>& apiMap = *g_APIMap;
    apiMap[std::hash<std::string>()("SpineNode_setSkinByName")] = (void*)SpineNode_setSkinByName;
    apiMap[std::hash<std::string>()("SpineNode_setAnimation")] = (void*)SpineNode_setAnimation;
    apiMap[std::hash<std::string>()("SpineNode_clearTrack")] = (void*)SpineNode_clearTrack;
    apiMap[std::hash<std::string>()("SpineNode_setSkinByIndex")] = (void*)SpineNode_setSkinByIndex;
    apiMap[std::hash<std::string>()("createSpine")] = (void*)createSpine;
    apiMap[std::hash<std::string>()("SpineNode_position")] = (void*)SpineNode_position;
    apiMap[std::hash<std::string>()("SpineNode_addAnimation")] = (void*)SpineNode_addAnimation;
    apiMap[std::hash<std::string>()("SpineNode_scale")] = (void*)SpineNode_scale;
    apiMap[std::hash<std::string>()("SpineNode_loadWithBinaryFile")] = (void*)SpineNode_loadWithBinaryFile;
    apiMap[std::hash<std::string>()("SpineNode_useBilinearFilter")] = (void*)SpineNode_useBilinearFilter;
}
